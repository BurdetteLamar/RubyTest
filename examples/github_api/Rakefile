require 'rexml/document'
include REXML

require_relative '../../lib/helpers/markdown_helper'
require_relative '../../lib/helpers/string_helper'
require_relative '../../lib/helpers/test_helper'

desc 'Build Tester Tour'
task :tester_tour do

  # Make the markdown file path for the given page_name
  def md_file_path_for_name(md_dir_path, page_name)
    return nil if page_name.nil?
    file_basename = format('%s', StringHelper.to_upper_camel_case(page_name))
    md_file_name = format('%s.md', file_basename)
    File.join(
        md_dir_path,
        md_file_name,
    )
  end

  def template_file_path_for_name(template_dir_path, page_name)
    file_basename = format('%s', StringHelper.to_upper_camel_case(page_name))
    template_file_name = format('%s.txt', file_basename)
    File.join(
        template_dir_path,
        template_file_name,
    )

  end

  def title_from_template_file(template_file_path)
    title = nil
    title_tag = /^#\s+/
    File.foreach(template_file_path) do |line|
      if line.match(title_tag)
        title = line.sub(title_tag, '').chomp
        break
      end
    end
    title
  end

  rakefile_dir_path = File.dirname(__FILE__)

  tour_dir_path = File.join(
      rakefile_dir_path,
      'tester_tour',
  )

  # For the index
  index_file_path = File.join(
      rakefile_dir_path,
      'TesterTour.md'
  )
  index_file = File.open(index_file_path, 'w')
  heading_text = <<EOT
# Tester Tour

The Tester Tour covers topics that are of interest to a tester who wants to develop and run tests for a REST API.

The tour shows how to use the example infrastructure to test a REST API.  The target REST API may be seen at:

- [GitHub REST API](https://developer.github.com/v3/)

Each following tour stop assumes you've seen all its predecessors, so repetition is minimal.

## Tour Stops

EOT
  index_file << heading_text

  test_dir_path = File.join(
      tour_dir_path,
      'tests',
  )

  log_dir_path = TestHelper.create_app_log_dir('github_api')
  template_dir_path = File.join(
      tour_dir_path,
      'md_templates',
  )
  conditioned_log_dir_path = File.join(
      tour_dir_path,
      'logs',
  )
  FileUtils.mkdir_p(conditioned_log_dir_path)
  md_dir_path = File.join(
      tour_dir_path,
      'md_files',
  )
  FileUtils.mkdir_p(md_dir_path)

  # To do.
  # names = %w/
  # verdict methods
  #     verdict_return_values and chaining
  #     data_exist
  #     data_crud
  #     data_convenience (get_all, get_first)
  #     helpers
  #     volatility
  # crud test
  # /
  # Done.
  # In work.
  page_names_by_section = {
      :getting_started => %w/
          overview
          first
      /,
      :logging => %w/
          sections
          verdicts
          rescued_exception
          unrescued_exception
      /,
      :data_objects => %w/
          data_objects
          flat_data_log
          flat_data_new
          flat_data_equal
          flat_data_valid
      /,
      :nested_data_objects => %w/
          nested_data_log
          nested_data_new
          nested_data_new_2
          nested_data_equal
          nested_data_valid
      /,
      :endpoints => %w/
          endpoint_objects
          endpoint_tests
          get_labels
          post_labels
          get_labels_name
          patch_labels_name
          delete_labels_name
      /,
      :data_object_methods => %w/
          crud
          getters
          equality
      /,
      :next => %w/
          more_to_come
      /,
      }

  titles = []
  all_page_names = []
  page_names_by_section.each_pair do |_, section_page_names|
    section_page_names.each do |page_name|
      all_page_names.push(page_name)
      template_file_path = template_file_path_for_name(template_dir_path, page_name)
      title = title_from_template_file(template_file_path)
      titles.push(title)
    end
  end

  def bookmark_for(title)
    return nil if title.nil?
    anchor_name = title.gsub(/\W+/, '-').downcase
    '#%s' % anchor_name
  end

  i = 0 # Page number.
  page_names_by_section.each_pair do |section, section_page_names|
    section_title = StringHelper.to_title(section.to_s)
    index_file.puts('### %s' % section_title)
    section_page_names.each do |page_name|
      test_file_name = format('%s_test.rb', page_name)
      test_file_path = File.join(
           test_dir_path,
           test_file_name,
      )
      counts = nil
      if File.exist?(test_file_path)
        command = format('ruby %s', test_file_path)
        system(command)
        # Process the log.
        log_file_name = format('test_%s.xml', page_name)
        log_file_path = File.join(
            log_dir_path,
            log_file_name,
        )
        counts = Log.get_counts_from_file(log_file_path)
        conditioned_file_path = File.join(
            conditioned_log_dir_path,
            log_file_name,
        )
        doc = nil
        formatter = REXML::Formatters::Pretty.new(2)
        formatter.compact = true
        File.open(log_file_path, 'r') do |file|
          doc = REXML::Document.new(file)
        end
        File.open(conditioned_file_path, 'w') do |file|
          file.puts(formatter.write(doc.root, ''))
        end
      end

      md_file_path = md_file_path_for_name(md_dir_path, page_name)
      prev_name = i == 0 ? nil : all_page_names[i - 1]
      prev_title = i == 0 ? nil : titles[i - 1]
      prev_md_file_path = md_file_path_for_name('.', prev_name)
      prev_md_bookmark_path = format('%s%s', prev_md_file_path, bookmark_for(prev_title))
      next_title = titles[i + 1]
      next_md_file_path = md_file_path_for_name('.', all_page_names[i + 1])
      next_md_bookmark_path = format('%s%s', next_md_file_path, bookmark_for(next_title))
      template_file_path = template_file_path_for_name(template_dir_path, page_name)
      options = {
          :highlight => true,
          :prev_bookmark_path => prev_md_bookmark_path,
          :next_bookmark_path => next_md_bookmark_path,
          :prev_title => prev_title,
          :next_title => next_title,
      }
      MarkdownHelper.build_file(template_file_path, md_file_path, options)
      md_file_name = File.basename(md_file_path)
      title = titles[i]
      relative_link_path = File.join(
          '.',
          'tester_tour',
          'md_files',
          md_file_name,
          bookmark_for(title),
      )
      link_item = format('- [%s](%s)', title, relative_link_path)
      index_file.puts(link_item)
      if counts
        expected_error_count = page_name.match('exception') ? 1 : 0
        raise RuntimeError.new(counts.inspect) if counts[:errors] != expected_error_count
      end
      i += 1
    end
  end
  index_file.close
  FileUtils.rm_rf(conditioned_log_dir_path)

end
