[navigation_links]

# Verifying a Complex Data Object

## Example Test

[file_source](../tests/data_equal_complex_test.rb)

Notes:

- The test gets a known `IssueLabel`, then clones it.
- We know that `IssueLabel` is complex, so it's _necessary_ to use `deep_clone`, not `clone`.
- In section `These are equal`:
  - Method `IssueLabel.equal?` tests equality, but does no logging.
  - The `fail unless` proves that it worked.
  - Method `IssueLabel.verdict_equal?` verifies and logs each value in the issue labels.
- In section `These are not equal`:
  - One value in the issue lable is modified.  The changed value is in a nested object.
  - Method `IssueLabel.equal?` test equality, but does no logging.
  - The `fail if ` proves that it worked.
  - Method `IssueLabel.verdict_equal?` verifies and logs each value in the issue labels.

## Log

[file_source](../logs/test_data_equal_complex.xml)

- Each actual value, even one that's in a nested object, is verified in a separate verdict.
- In section `These are equal`, all verdicts pass.
- In section `These are not equal`, one (deeply nested) verdict fails.

[navigation_links]
