[navigation_links]

# Logging a Complex Data Object

This page introduces complex data classes, and shows how to log instances of them.

## Example Test

[file_source](../tests/data_log_complex_test.rb)

Notes:

- Class `RateLimit` derives from base classes that provide it with the ability to log itself, as seen here in the call to method `rate_limit.log`.
## Log

[file_source](../logs/test_data_log_complex.xml)

Notes:

- The section named `Fetched rate limit` logs the values in the fetched rate limit.
- Nested data objects are recursively logged.
- The actual data returned by the client has this structure:

```ruby
{
    :resources => {
        :core => {
            :limit => 5000,
            :remaining => 4984,
            :reset => 1507676679,
        },
        :search => {
            :limit => 30,
            :remaining => 30,
            :reset => 1507673695,
        },
        :graphql => {
            :limit => 5000,
            :remaining => 5000,
            :reset => 1507677235,
        }
    },
    :rate => {
        :limit => 5000,
        :remaining => 4984,
        :reset => 1507676679,
    }
}
```
- The test framework automatically forms these nested hashes into nested objects.
- The nested objects recursively log themselves into nested log sections.

[navigation_links]
