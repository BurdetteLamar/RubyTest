[navigation_links]

# Verifying Nested Data Objects

Nested data objects can be verified recursively.

## Example Test

[file_source](../tests/nested_data_equal_test.rb)

Notes:

- Use method `equal?` to test nested data object equality, without logging.
- Use method `verdict_equal?` to test nested object equality, including logging.
- The test gets a known `RateLimit`, then clones it.
- We know that `RateLimit` has nested data objects, so it's _necessary_ to use `deep_clone`, not `clone`.
- In section `These are equal`:
  - Method `RateLimit.equal?` tests equality, but does no logging.
  - The `fail unless` proves that it worked.
  - Method `RateLimit.verdict_equal?` verifies and logs each value in the rate limit.
- In section `These are not equal`:
  - One value in the rate limit is modified.  The changed value is in a nested object.
  - Method `RateLimit.equal?` test equality, but does no logging.
  - The `fail if ` proves that it worked.
  - Method `RateLimit.verdict_equal?` verifies and logs each value in the rate limit.

## Log

[file_source](../logs/test_nested_data_equal.xml)

- Each actual value, even one that's in a nested object, is verified in a separate verdict.
- In section `These are equal`, all verdicts pass.
- In section `These are not equal`, one (deeply nested) verdict fails.

[navigation_links]
