require 'rexml/document'
include REXML

require_relative '../../lib/helpers/markdown_helper'
require_relative '../../lib/helpers/string_helper'
require_relative '../../lib/helpers/test_helper'

desc 'Build Tester Tour'
task :tester_tour do

  # Make the markdown file path for the given name
  def md_file_path_for_name(md_dir_path, name)
    return nil if name.nil?
    file_basename = format('%s', StringHelper.to_upper_camel_case(name))
    md_file_name = format('%s.md', file_basename)
    File.join(
        md_dir_path,
        md_file_name,
    )
  end

  rakefile_dir_path = File.dirname(__FILE__)

  tour_dir_path = File.join(
      rakefile_dir_path,
      'tester_tour',
  )

  # For the index
  index_file_path = File.join(
      rakefile_dir_path,
      'TesterTour.md'
  )
  index_file = File.open(index_file_path, 'w')
  heading_text = <<EOT
# Tester Tour

## Pages

The Tester Tour covers only topics of interest to a tester who wants to develop and/or run tests for a REST API.

This tester is distinguished from an infrastructure developer, who would want to develop infrastructure that supports testing a REST API.

The tour shows how to use the example infrastructure to test a REST API.  The target REST API may be seen at:

- [JSONPlaceholder](https://jsonplaceholder.typicode.com)

Each following page assumes you've seen all its predecessors, so repetition is minimal.

EOT
  index_file << heading_text

  test_dir_path = File.join(
      tour_dir_path,
      'tests',
  )

  log_dir_path = TestHelper.create_app_log_dir('rest_api')
  template_dir_path = File.join(
      tour_dir_path,
      'md_templates',
  )
  conditioned_log_dir_path = File.join(
      tour_dir_path,
      'logs',
  )
  FileUtils.mkdir_p(conditioned_log_dir_path)
  md_dir_path = File.join(
      tour_dir_path,
      'md_files',
  )
  FileUtils.mkdir_p(md_dir_path)

  names = %w/
      test
      sections
      verdicts
      volatility
      exceptions
      get_albums
      get_albums_id
      delete_albums_id
      put_albums_id
      post_albums
  /
  names.each_with_index do |name, i|
    test_file_name = format('%s_test.rb', name)
    test_file_path = File.join(
         test_dir_path,
         test_file_name,
    )
    if File.exist?(test_file_path)
      p test_file_name
      command = format('ruby %s', test_file_path)
      system(command)
      # Process the log.
      log_file_name = format('test_%s.xml', name)
      log_file_path = File.join(
          log_dir_path,
          log_file_name,
      )
      conditioned_file_path = File.join(
          conditioned_log_dir_path,
          log_file_name,
      )
      doc = nil
      formatter = REXML::Formatters::Pretty.new(2)
      formatter.compact = true
      File.open(log_file_path, 'r') do |file|
        doc = REXML::Document.new(file)
      end
      File.open(conditioned_file_path, 'w') do |file|
        file.puts(formatter.write(doc.root, ''))
      end
    end

    md_file_path = md_file_path_for_name(md_dir_path, name)
    prev_name = i == 0 ? nil : names[i - 1]
    prev_md_file_path = md_file_path_for_name('.', prev_name)
    next_md_file_path = md_file_path_for_name('.', names[i + 1])
    file_basename = format('%s', StringHelper.to_upper_camel_case(name))
    template_file_name = format('%s.txt', file_basename)
    template_file_path = File.join(
        template_dir_path,
        template_file_name,
    )
    options = {
        :highlight => true,
        :prev_file_path => prev_md_file_path,
        :next_file_path => next_md_file_path,
    }
    MarkdownHelper.build_file(template_file_path, md_file_path, options)
    link_item = format('- [%s](%s)', file_basename, md_file_path)
    index_file.puts(link_item)

  end
  index_file.close
  FileUtils.rm_rf(conditioned_log_dir_path)

end

desc 'Run examples'
task :examples do
  rakefile_dir_path = File.dirname(__FILE__)
  test_dir_path = File.join(
                          rakefile_dir_path,
                          'tests',
  )
  TestHelper.create_app_log_dir('rest_api')
  %w/
        albums
        comments
        photos
        posts
        todos
        users
    /.each do |name|
    test_file_name = format('%s_test.rb', name)
    test_file_path = File.join(
        test_dir_path,
        test_file_name,
    )
    command = format('ruby %s', test_file_path)
    system(command)
  end

end
