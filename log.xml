<log><summary errors='1' failures='73' verdicts='141'/><section name='Section examples' number='1'><section name='Outer section' number='1.1'><section name='Inner section' number='1.1.1'/></section><section name='With timestamp' number='1.2' timestamp='2017-04-03-Mon-10.40.15.317'/><section duration_seconds='1.516' name='With duration' number='1.3'/><section name='With rescue' number='1.4'><uncaught_exception><verdict_id>With rescue</verdict_id><class>RuntimeError</class><message>Boo!</message><backtrace/></uncaught_exception></section><section attr_name_0='attr_value_0' attr_name_1='attr_value_1' name='With custom attributes' number='1.5'/></section><section name='Put element examples' number='2'><section name='Put element with strings, which are appended to PCDATA' number='2.1'><strings>First string.Second string.</strings></section><section name='Put element with objects, whose .inspect values are appended to PCDATA' number='2.2'><objects>#&lt;Set: {:a, :b}&gt;3.14159</objects></section><section name='Put element with mix of arguments' number='2.3'><mixture>First string.#&lt;Set: {:a, :b}&gt;Second string3.14159</mixture></section></section><section name='Use verdict_assert?' number='3'><verdict id='passing_verdict_assert' message='Passing verdict_assert?' method='verdict_assert?' outcome='passed' volatile='false'><act_value>true</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected false to be truthy.</message><backtrace/></exception><verdict id='failing_verdict_assert' message='Failing verdict_assert?' method='verdict_assert?' outcome='failed' volatile='false'><act_value>false</act_value></verdict><verdict id='volatile_verdict_assert' message='Volatile verdict_assert?' method='verdict_assert?' outcome='passed' volatile='true'><act_value>true</act_value></verdict></section><section name='Use alias va?' number='4'><verdict id='passing_va' message='Passing va?' method='verdict_assert?' outcome='passed' volatile='false'><act_value>true</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected false to be truthy.</message><backtrace/></exception><verdict id='failing_va' message='Failing va?' method='verdict_assert?' outcome='failed' volatile='false'><act_value>false</act_value></verdict><verdict id='volatile_va' message='Volatile va?' method='verdict_assert?' outcome='passed' volatile='true'><act_value>true</act_value></verdict></section><section name='Use verdict_assert_empty?' number='5'><verdict id='passing_verdict_assert_empty' message='Passing verdict_assert_empty?' method='verdict_assert_empty?' outcome='passed' volatile='false'><act_value>[]</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected [:a] to be empty.</message><backtrace/></exception><verdict id='failing_verdict_assert_empty' message='Failing verdict_assert_empty?' method='verdict_assert_empty?' outcome='failed' volatile='false'><act_value>[:a]</act_value></verdict></section><section name='Use alias va_empty?' number='6'><verdict id='passing_va_empty' message='Passing va_empty?' method='verdict_assert_empty?' outcome='passed' volatile='false'><act_value>[]</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected [:a] to be empty.</message><backtrace/></exception><verdict id='failing_va_empty' message='Failing va_empty?' method='verdict_assert_empty?' outcome='failed' volatile='false'><act_value>[:a]</act_value></verdict></section><section name='Use verdict_assert_equal?' number='7'><verdict id='passing_verdict_assert_equal' message='Passing verdict_assert_equal?' method='verdict_assert_equal?' outcome='passed' volatile='false'><exp_value>0</exp_value><act_value>0</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected: 0
  Actual: 1</message><backtrace/></exception><verdict id='failing_verdict_assert_equal' message='Failing verdict_assert_equal?' method='verdict_assert_equal?' outcome='failed' volatile='false'><exp_value>0</exp_value><act_value>1</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected: #&lt;Set: {:a, :b, :c, :d}&gt;
  Actual: #&lt;Set: {:a, :b, :e, :f}&gt;</message><backtrace/></exception><verdict id='verdict_assert_equal_set' message='Sets' method='verdict_assert_equal?' outcome='failed' volatile='false'><exp_value>#&lt;Set: {:a, :b, :c, :d}&gt;</exp_value><act_value>#&lt;Set: {:a, :b, :e, :f}&gt;</act_value></verdict><analysis><missing>#&lt;Set: {:c, :d}&gt;</missing><unexpected>#&lt;Set: {:e, :f}&gt;</unexpected><ok>#&lt;Set: {:a, :b}&gt;</ok></analysis><exception><class>Minitest::Assertion</class><message>--- expected
+++ actual
@@ -1 +1 @@
-{:a=&gt;0, :b=&gt;1, :c=&gt;2, :d=&gt;3, :e=&gt;4, :f=&gt;5}
+{:a=&gt;0, :b=&gt;1, :c=&gt;3, :d=&gt;2, :g=&gt;6, :h=&gt;7}</message><backtrace/></exception><verdict id='verdict_assert_equal_hash' message='Hashes' method='verdict_assert_equal?' outcome='failed' volatile='false'><exp_value a='0' b='1' c='2' d='3' e='4' f='5'/><act_value a='0' b='1' c='3' d='2' g='6' h='7'/></verdict><analysis><missing e='4' f='5'/><unexpected g='6' h='7'/><changed c='{:expected=&gt;2, :actual=&gt;3}' d='{:expected=&gt;3, :actual=&gt;2}'/><ok a='0' b='1'/></analysis></section><section name='Use va_equal?' number='8'><verdict id='passing_va_equal' message='Passing va_equal?' method='verdict_assert_equal?' outcome='passed' volatile='false'><exp_value>0</exp_value><act_value>0</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected: 0
  Actual: 1</message><backtrace/></exception><verdict id='failing_va_equal' message='Failing va_equal?' method='verdict_assert_equal?' outcome='failed' volatile='false'><exp_value>0</exp_value><act_value>1</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected: #&lt;Set: {:a, :b, :c, :d}&gt;
  Actual: #&lt;Set: {:a, :b, :e, :f}&gt;</message><backtrace/></exception><verdict id='va_equal_set' message='Sets' method='verdict_assert_equal?' outcome='failed' volatile='false'><exp_value>#&lt;Set: {:a, :b, :c, :d}&gt;</exp_value><act_value>#&lt;Set: {:a, :b, :e, :f}&gt;</act_value></verdict><analysis><missing>#&lt;Set: {:c, :d}&gt;</missing><unexpected>#&lt;Set: {:e, :f}&gt;</unexpected><ok>#&lt;Set: {:a, :b}&gt;</ok></analysis><exception><class>Minitest::Assertion</class><message>--- expected
+++ actual
@@ -1 +1 @@
-{:a=&gt;0, :b=&gt;1, :c=&gt;2, :d=&gt;3, :e=&gt;4, :f=&gt;5}
+{:a=&gt;0, :b=&gt;1, :c=&gt;3, :d=&gt;2, :g=&gt;6, :h=&gt;7}</message><backtrace/></exception><verdict id='va_equal_hash' message='Hashes' method='verdict_assert_equal?' outcome='failed' volatile='false'><exp_value a='0' b='1' c='2' d='3' e='4' f='5'/><act_value a='0' b='1' c='3' d='2' g='6' h='7'/></verdict><analysis><missing e='4' f='5'/><unexpected g='6' h='7'/><changed c='{:expected=&gt;2, :actual=&gt;3}' d='{:expected=&gt;3, :actual=&gt;2}'/><ok a='0' b='1'/></analysis></section><section name='Use verdict_assert_in_delta?' number='9'><verdict id='passing_verdict_assert_in_delta' message='Passing verdict_assert_in_delta?' method='verdict_assert_in_delta?' outcome='passed' volatile='false'><exp_value>1</exp_value><act_value>1.1</act_value><delta>0.2</delta></verdict><exception><class>Minitest::Assertion</class><message>Expected |1 - 1.2| (0.19999999999999996) to be &lt;= 0.1.</message><backtrace/></exception><verdict id='failing_verdict_assert_in_delta' message='Failing verdict_assert_in_delta?' method='verdict_assert_in_delta?' outcome='failed' volatile='false'><exp_value>1</exp_value><act_value>1.2</act_value><delta>0.1</delta></verdict></section><section name='Use va_in_delta?' number='10'><verdict id='passing_va_in_delta' message='Passing va_in_delta?' method='verdict_assert_in_delta?' outcome='passed' volatile='false'><exp_value>1</exp_value><act_value>1.1</act_value><delta>0.2</delta></verdict><exception><class>Minitest::Assertion</class><message>Expected |1 - 1.2| (0.19999999999999996) to be &lt;= 0.1.</message><backtrace/></exception><verdict id='failing_va_in_delta' message='Failing va_in_delta?' method='verdict_assert_in_delta?' outcome='failed' volatile='false'><exp_value>1</exp_value><act_value>1.2</act_value><delta>0.1</delta></verdict></section><section name='Use verdict_assert_in_epsilon?' number='11'><verdict id='passing_verdict_assert_in_epsilon' message='Passing verdict_assert_in_epsilon?' method='verdict_assert_in_epsilon?' outcome='passed' volatile='false'><exp_value>1</exp_value><act_value>1.1</act_value><epsilon>0.2</epsilon></verdict><exception><class>Minitest::Assertion</class><message>Expected |1 - 1.2| (0.19999999999999996) to be &lt;= 0.1.</message><backtrace/></exception><verdict id='failing_verdict_assert_in_epsilon' message='Failing verdict_assert_in_epsilon?' method='verdict_assert_in_epsilon?' outcome='failed' volatile='false'><exp_value>1</exp_value><act_value>1.2</act_value><epsilon>0.1</epsilon></verdict></section><section name='Use va_in_epsilon?' number='12'><verdict id='passing_va_in_epsilon' message='Passing va_in_epsilon?' method='verdict_assert_in_epsilon?' outcome='passed' volatile='false'><exp_value>1</exp_value><act_value>1.1</act_value><epsilon>0.2</epsilon></verdict><exception><class>Minitest::Assertion</class><message>Expected |1 - 1.2| (0.19999999999999996) to be &lt;= 0.1.</message><backtrace/></exception><verdict id='failing_va_in_epsilon' message='Failing va_in_epsilon?' method='verdict_assert_in_epsilon?' outcome='failed' volatile='false'><exp_value>1</exp_value><act_value>1.2</act_value><epsilon>0.1</epsilon></verdict></section><section name='Use verdict_assert_includes?' number='13'><verdict id='passing_verdict_assert_includes' message='Passing verdict_assert_includes?' method='verdict_assert_includes?' outcome='passed' volatile='false'><exp_value>[:a]</exp_value><act_value>:a</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected [:b] to include :a.</message><backtrace/></exception><verdict id='failing_verdict_assert_includes' message='Failing verdict_assert_includes?' method='verdict_assert_includes?' outcome='failed' volatile='false'><exp_value>[:b]</exp_value><act_value>:a</act_value></verdict></section><section name='Use va_includes?' number='14'><verdict id='passing_va_includes' message='Passing va_includes?' method='verdict_assert_includes?' outcome='passed' volatile='false'><exp_value>[:a]</exp_value><act_value>:a</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected [:b] to include :a.</message><backtrace/></exception><verdict id='failing_va_includes' message='Failing va_includes?' method='verdict_assert_includes?' outcome='failed' volatile='false'><exp_value>[:b]</exp_value><act_value>:a</act_value></verdict></section><section name='Use verdict_assert_instance_of?' number='15'><verdict id='passing_verdict_assert_instance_of' message='Passing verdict_assert_instance_of?' method='verdict_assert_instance_of?' outcome='passed' volatile='false'><exp_value>String</exp_value><act_value>Boo!</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected 0 to be an instance of String, not Fixnum.</message><backtrace/></exception><verdict id='failing_verdict_assert_instance_of' message='Failing verdict_assert_instance_of?' method='verdict_assert_instance_of?' outcome='failed' volatile='false'><exp_value>String</exp_value><act_value>0</act_value></verdict></section><section name='Use va_instance_of?' number='16'><verdict id='passing_va_instance_of' message='Passing va_instance_of?' method='verdict_assert_instance_of?' outcome='passed' volatile='false'><exp_value>String</exp_value><act_value>Boo!</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected 0 to be an instance of String, not Fixnum.</message><backtrace/></exception><verdict id='failing_va_instance_of' message='Failing va_instance_of?' method='verdict_assert_instance_of?' outcome='failed' volatile='false'><exp_value>String</exp_value><act_value>0</act_value></verdict></section><section name='Use verdict_assert_kind_of?' number='17'><verdict id='passing_verdict_assert_kind_of' message='Passing verdict_assert_kind_of?' method='verdict_assert_kind_of?' outcome='passed' volatile='false'><exp_value>StandardError</exp_value><act_value>#&lt;RuntimeError: RuntimeError&gt;</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected 0 to be a kind of StandardError, not Fixnum.</message><backtrace/></exception><verdict id='failing_verdict_assert_kind_of' message='Failing verdict_assert_kind_of?' method='verdict_assert_kind_of?' outcome='failed' volatile='false'><exp_value>StandardError</exp_value><act_value>0</act_value></verdict></section><section name='Use va_kind_of?' number='18'><verdict id='passing_va_kind_of' message='Passing va_kind_of?' method='verdict_assert_kind_of?' outcome='passed' volatile='false'><exp_value>StandardError</exp_value><act_value>#&lt;RuntimeError: RuntimeError&gt;</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected 0 to be a kind of StandardError, not Fixnum.</message><backtrace/></exception><verdict id='failing_va_kind_of' message='Failing va_kind_of?' method='verdict_assert_kind_of?' outcome='failed' volatile='false'><exp_value>StandardError</exp_value><act_value>0</act_value></verdict></section><section name='Use verdict_assert_match?' number='19'><verdict id='passing_verdict_assert_match' message='Passing verdict_assert_match?' method='verdict_assert_match?' outcome='passed' volatile='false'><exp_value>/foo/</exp_value><act_value>food</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected /foo/ to match # encoding: UTF-8
&quot;good&quot;.</message><backtrace/></exception><verdict id='failing_verdict_assert_match' message='Failing verdict_assert_match?' method='verdict_assert_match?' outcome='failed' volatile='false'><exp_value>/foo/</exp_value><act_value>good</act_value></verdict></section><section name='Use va_match?' number='20'><verdict id='passing_va_match' message='Passing va_match?' method='verdict_assert_match?' outcome='passed' volatile='false'><exp_value>/foo/</exp_value><act_value>food</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected /foo/ to match # encoding: UTF-8
&quot;good&quot;.</message><backtrace/></exception><verdict id='failing_va_match' message='Failing va_match?' method='verdict_assert_match?' outcome='failed' volatile='false'><exp_value>/foo/</exp_value><act_value>good</act_value></verdict></section><section name='Use verdict_assert_nil?' number='21'><verdict id='passing_verdict_assert_nil' message='Passing verdict_assert_nil?' method='verdict_assert_nil?' outcome='passed' volatile='false'><act_value>nil</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected false to be nil.</message><backtrace/></exception><verdict id='failing_verdict_assert_nil' message='Failing verdict_assert_nil?' method='verdict_assert_nil?' outcome='failed' volatile='false'><act_value>false</act_value></verdict></section><section name='Use alias va_nil?' number='22'><verdict id='passing_va_nil' message='Passing va_nil?' method='verdict_assert_nil?' outcome='passed' volatile='false'><act_value>nil</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected false to be nil.</message><backtrace/></exception><verdict id='failing_va_nil' message='Failing va_nil?' method='verdict_assert_nil?' outcome='failed' volatile='false'><act_value>false</act_value></verdict></section><section name='Use verdict_assert_operator?' number='23'><verdict id='passing_verdict_assert_operator' message='Passing verdict_assert_operator?' method='verdict_assert_operator?' outcome='passed' volatile='false'><object_1>1</object_1><operator>:&lt;</operator><object_2>2</object_2></verdict><exception><class>Minitest::Assertion</class><message>Expected 2 to be &lt; 1.</message><backtrace/></exception><verdict id='failing_verdict_assert_operator' message='Failing verdict_assert_operator?' method='verdict_assert_operator?' outcome='failed' volatile='false'><object_1>2</object_1><operator>:&lt;</operator><object_2>1</object_2></verdict></section><section name='Use va_operator?' number='24'><verdict id='passing_va_operator' message='Passing va_operator?' method='verdict_assert_operator?' outcome='passed' volatile='false'><object_1>1</object_1><operator>:&lt;</operator><object_2>2</object_2></verdict><exception><class>Minitest::Assertion</class><message>Expected 2 to be &lt; 1.</message><backtrace/></exception><verdict id='failing_va_operator' message='Failing va_operator?' method='verdict_assert_operator?' outcome='failed' volatile='false'><object_1>2</object_1><operator>:&lt;</operator><object_2>1</object_2></verdict></section><section name='Use verdict_assert_output?' number='25'><verdict id='passing_verdict_assert_output' message='Passing verdict_assert_output?' method='verdict_assert_output?' outcome='passed' volatile='false'><stdout>stdout</stdout><stderr>stderr</stderr></verdict><exception><class>Minitest::Assertion</class><message>In stderr.
--- expected
+++ actual
@@ -1,2 +1 @@
-# encoding: UTF-8
-&quot;stderr&quot;
+&quot;not stderr&quot;</message><backtrace/></exception><verdict id='failing_verdict_assert_output' message='Failing verdict_assert_output?' method='verdict_assert_output?' outcome='failed' volatile='false'><stdout>stdout</stdout><stderr>stderr</stderr></verdict></section><section name='Use va_output?' number='26'><verdict id='passing_va_output' message='Passing va_output?' method='verdict_assert_output?' outcome='passed' volatile='false'><stdout>stdout</stdout><stderr>stderr</stderr></verdict><exception><class>Minitest::Assertion</class><message>In stderr.
--- expected
+++ actual
@@ -1,2 +1 @@
-# encoding: UTF-8
-&quot;stderr&quot;
+&quot;not stderr&quot;</message><backtrace/></exception><verdict id='failing_va_output' message='Failing va_output?' method='verdict_assert_output?' outcome='failed' volatile='false'><stdout>stdout</stdout><stderr>stderr</stderr></verdict></section><section name='Use verdict_assert_predicate?' number='27'><verdict id='passing_verdict_assert_predicate' message='Passing verdict_assert_predicate?' method='verdict_assert_predicate?' outcome='passed' volatile='false'><object/><operator>:empty?</operator></verdict><exception><class>Minitest::Assertion</class><message>Expected # encoding: UTF-8
&quot;a&quot; to be empty?.</message><backtrace/></exception><verdict id='failing_verdict_assert_predicate' message='Failing verdict_assert_predicate?' method='verdict_assert_predicate?' outcome='failed' volatile='false'><object>a</object><operator>:empty?</operator></verdict></section><section name='Use alias va_predicate?' number='28'><verdict id='passing_va_predicate' message='Passing va_predicate?' method='verdict_assert_predicate?' outcome='passed' volatile='false'><object/><operator>:empty?</operator></verdict><exception><class>Minitest::Assertion</class><message>Expected # encoding: UTF-8
&quot;a&quot; to be empty?.</message><backtrace/></exception><verdict id='failing_va_predicate' message='Failing va_predicate?' method='verdict_assert_predicate?' outcome='failed' volatile='false'><object>a</object><operator>:empty?</operator></verdict></section><section name='Use verdict_assert_raises?' number='29'><verdict id='passing_verdict_assert_raises' message='Passing verdict_assert_raises?' method='verdict_assert_raises?' outcome='passed' volatile='false'><error_class>RuntimeError</error_class></verdict><exception><class>Minitest::Assertion</class><message>RuntimeError expected but nothing was raised.</message><backtrace/></exception><verdict id='failing_verdict_assert_raises' message='Failing verdict_assert_raises?' method='verdict_assert_raises?' outcome='failed' volatile='false'><error_class>RuntimeError</error_class></verdict></section><section name='Use va_raises?' number='30'><verdict id='passing_va_raises' message='Passing va_raises?' method='verdict_assert_raises?' outcome='passed' volatile='false'><error_class>RuntimeError</error_class></verdict><exception><class>Minitest::Assertion</class><message>RuntimeError expected but nothing was raised.</message><backtrace/></exception><verdict id='failing_va_raises' message='Failing va_raises?' method='verdict_assert_raises?' outcome='failed' volatile='false'><error_class>RuntimeError</error_class></verdict></section><section name='Use verdict_assert_respond_to?' number='31'><verdict id='passing_verdict_assert_respond_to' message='Passing verdict_assert_respond_to?' method='verdict_assert_respond_to?' outcome='passed' volatile='false'><object>foo</object><method>:empty?</method></verdict><exception><class>Minitest::Assertion</class><message>Expected 0 (Fixnum) to respond to #empty?.</message><backtrace/></exception><verdict id='failing_verdict_assert_respond_to' message='Failing verdict_assert_respond_to?' method='verdict_assert_respond_to?' outcome='failed' volatile='false'><object>0</object><method>:empty?</method></verdict></section><section name='Use alias va_respond_to?' number='32'><verdict id='passing_va_respond_to' message='Passing va_respond_to?' method='verdict_assert_respond_to?' outcome='passed' volatile='false'><object>foo</object><method>:empty?</method></verdict><exception><class>Minitest::Assertion</class><message>Expected 0 (Fixnum) to respond to #empty?.</message><backtrace/></exception><verdict id='failing_va_respond_to' message='Failing va_respond_to?' method='verdict_assert_respond_to?' outcome='failed' volatile='false'><object>0</object><method>:empty?</method></verdict></section><section name='Use verdict_assert_same?' number='33'><verdict id='passing_verdict_assert_same' message='Passing verdict_assert_same?' method='verdict_assert_same?' outcome='passed' volatile='false'><exp_value>#&lt;Object:0x00000002d75828&gt;</exp_value><act_value>#&lt;Object:0x00000002d75828&gt;</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected #&lt;Object:0x00000002d75800&gt; (oid=23833600) to be the same as #&lt;Object:0x00000002d75828&gt; (oid=23833620).</message><backtrace/></exception><verdict id='failing_verdict_assert_same' message='Failing verdict_assert_same?' method='verdict_assert_same?' outcome='failed' volatile='false'><exp_value>#&lt;Object:0x00000002d75828&gt;</exp_value><act_value>#&lt;Object:0x00000002d75800&gt;</act_value></verdict></section><section name='Use va_same?' number='34'><verdict id='passing_va_same' message='Passing va_same?' method='verdict_assert_same?' outcome='passed' volatile='false'><exp_value>#&lt;Object:0x00000002d75828&gt;</exp_value><act_value>#&lt;Object:0x00000002d75828&gt;</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected #&lt;Object:0x00000002d75800&gt; (oid=23833600) to be the same as #&lt;Object:0x00000002d75828&gt; (oid=23833620).</message><backtrace/></exception><verdict id='failing_va_same' message='Failing va_same?' method='verdict_assert_same?' outcome='failed' volatile='false'><exp_value>#&lt;Object:0x00000002d75828&gt;</exp_value><act_value>#&lt;Object:0x00000002d75800&gt;</act_value></verdict></section><section name='Use verdict_assert_send?' number='35'><verdict id='passing_verdict_assert_send' message='Passing verdict_assert_send?' method='verdict_assert_send?' outcome='passed' volatile='false'><send_array>[&quot;&quot;, :empty?]</send_array></verdict><exception><class>Minitest::Assertion</class><message>Expected # encoding: UTF-8
&quot;a&quot;.empty?(*[]) to return true.</message><backtrace/></exception><verdict id='failing_verdict_assert_send' message='Failing verdict_assert_send?' method='verdict_assert_send?' outcome='failed' volatile='false'><send_array>[&quot;a&quot;, :empty?]</send_array></verdict></section><section name='Use va_send?' number='36'><verdict id='passing_va_send' message='Passing va_send?' method='verdict_assert_send?' outcome='passed' volatile='false'><send_array>[&quot;&quot;, :empty?]</send_array></verdict><exception><class>Minitest::Assertion</class><message>Expected # encoding: UTF-8
&quot;a&quot;.empty?(*[]) to return true.</message><backtrace/></exception><verdict id='failing_va_send' message='Failing va_send?' method='verdict_assert_send?' outcome='failed' volatile='false'><send_array>[&quot;a&quot;, :empty?]</send_array></verdict></section><section name='Use verdict_assert_silent?' number='37'><verdict id='passing_verdict_assert_silent' message='Passing verdict_assert_silent?' method='verdict_assert_silent?' outcome='passed' volatile='false'/><exception><class>Minitest::Assertion</class><message>In stdout.
--- expected
+++ actual
@@ -1,2 +1 @@
-# encoding: UTF-8
-&quot;&quot;
+&quot;Boo!&quot;</message><backtrace/></exception><verdict id='failing_verdict_assert_silent' message='Failing verdict_assert_silent?' method='verdict_assert_silent?' outcome='failed' volatile='false'/></section><section name='Use va_silent?' number='38'><verdict id='passing_va_silent' message='Passing va_silent?' method='verdict_assert_silent?' outcome='passed' volatile='false'/><exception><class>Minitest::Assertion</class><message>In stdout.
--- expected
+++ actual
@@ -1,2 +1 @@
-# encoding: UTF-8
-&quot;&quot;
+&quot;Boo!&quot;</message><backtrace/></exception><verdict id='failing_va_silent' message='Failing va_silent?' method='verdict_assert_silent?' outcome='failed' volatile='false'/></section><section name='Use verdict_assert_throws?' number='39'><verdict id='passing_verdict_assert_throws' message='Passing verdict_assert_throws?' method='verdict_assert_throws?' outcome='passed' volatile='false'><error_class>Exception</error_class></verdict><exception><class>Minitest::Assertion</class><message>Expected Exception to have been thrown.</message><backtrace/></exception><verdict id='failing_verdict_assert_throws' message='Failing verdict_assert_throws?' method='verdict_assert_throws?' outcome='failed' volatile='false'><error_class>Exception</error_class></verdict></section><section name='Use va_throws?' number='40'><verdict id='passing_va_throws' message='Passing va_throws?' method='verdict_assert_throws?' outcome='passed' volatile='false'><error_class>Exception</error_class></verdict><exception><class>Minitest::Assertion</class><message>Expected Exception to have been thrown.</message><backtrace/></exception><verdict id='failing_va_throws' message='Failing va_throws?' method='verdict_assert_throws?' outcome='failed' volatile='false'><error_class>Exception</error_class></verdict></section><section name='Use verdict_refute?' number='41'><exception><class>Minitest::Assertion</class><message>Expected true to not be truthy.</message><backtrace/></exception><verdict id='passing_verdict_refute' message='Passing verdict_refute?' method='verdict_refute?' outcome='failed' volatile='false'><act_value>true</act_value></verdict><verdict id='failing_verdict_refute' message='Failing verdict_refute?' method='verdict_refute?' outcome='passed' volatile='false'><act_value>false</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected true to not be truthy.</message><backtrace/></exception><verdict id='volatile_verdict_refute' message='Volatile verdict_refute?' method='verdict_refute?' outcome='failed' volatile='true'><act_value>true</act_value></verdict></section><section name='Use alias vr?' number='42'><exception><class>Minitest::Assertion</class><message>Expected true to not be truthy.</message><backtrace/></exception><verdict id='passing_vr' message='Passing vr?' method='verdict_refute?' outcome='failed' volatile='false'><act_value>true</act_value></verdict><verdict id='failing_vr' message='Failing vr?' method='verdict_refute?' outcome='passed' volatile='false'><act_value>false</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected true to not be truthy.</message><backtrace/></exception><verdict id='volatile_vr' message='Volatile vr?' method='verdict_refute?' outcome='failed' volatile='true'><act_value>true</act_value></verdict></section><section name='Use verdict_refute_empty?' number='43'><verdict id='passing_verdict_refute_empty' message='Passing verdict_refute_empty?' method='verdict_refute_empty?' outcome='passed' volatile='false'><act_value>[:a]</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected [] to not be empty.</message><backtrace/></exception><verdict id='failing_verdict_refute_empty' message='Failing verdict_refute_empty?' method='verdict_refute_empty?' outcome='failed' volatile='false'><act_value>[]</act_value></verdict></section><section name='Use alias vr_empty?' number='44'><verdict id='passing_vr_empty' message='Passing vr_empty?' method='verdict_refute_empty?' outcome='passed' volatile='false'><act_value>[:a]</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected [] to not be empty.</message><backtrace/></exception><verdict id='failing_vr_empty' message='Failing vr_empty?' method='verdict_refute_empty?' outcome='failed' volatile='false'><act_value>[]</act_value></verdict></section><section name='Use verdict_refute_equal?' number='45'><verdict id='passing_verdict_refute_equal' message='Passing verdict_refute_equal?' method='verdict_refute_equal?' outcome='passed' volatile='false'><exp_value>0</exp_value><act_value>1</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected 0 to not be equal to 0.</message><backtrace/></exception><verdict id='failing_verdict_refute_equal' message='Failing verdict_refute_equal?' method='verdict_refute_equal?' outcome='failed' volatile='false'><exp_value>0</exp_value><act_value>0</act_value></verdict></section><section name='Use vr_equal?' number='46'><verdict id='passing_vr_equal' message='Passing vr_equal?' method='verdict_refute_equal?' outcome='passed' volatile='false'><exp_value>0</exp_value><act_value>1</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected 0 to not be equal to 0.</message><backtrace/></exception><verdict id='failing_vr_equal' message='Failing vr_equal?' method='verdict_refute_equal?' outcome='failed' volatile='false'><exp_value>0</exp_value><act_value>0</act_value></verdict></section><section name='Use verdict_refute_in_delta?' number='47'><exception><class>Minitest::Assertion</class><message>Expected |1 - 1.1| (0.10000000000000009) to not be &lt;= 0.2.</message><backtrace/></exception><verdict id='passing_verdict_refute_in_delta' message='Passing verdict_refute_in_delta?' method='verdict_refute_in_delta?' outcome='failed' volatile='false'><exp_value>1</exp_value><act_value>1.1</act_value><delta>0.2</delta></verdict><verdict id='failing_verdict_refute_in_delta' message='Failing verdict_refute_in_delta?' method='verdict_refute_in_delta?' outcome='passed' volatile='false'><exp_value>1</exp_value><act_value>1.2</act_value><delta>0.1</delta></verdict></section><section name='Use vr_in_delta?' number='48'><verdict id='passing_vr_in_delta' message='Passing vr_in_delta?' method='verdict_refute_in_delta?' outcome='passed' volatile='false'><exp_value>1</exp_value><act_value>1.2</act_value><delta>0.1</delta></verdict><exception><class>Minitest::Assertion</class><message>Expected |1 - 1.1| (0.10000000000000009) to not be &lt;= 0.2.</message><backtrace/></exception><verdict id='failing_vr_in_delta' message='Failing vr_in_delta?' method='verdict_refute_in_delta?' outcome='failed' volatile='false'><exp_value>1</exp_value><act_value>1.1</act_value><delta>0.2</delta></verdict></section><section name='Use verdict_refute_in_epsilon?' number='49'><verdict id='passing_verdict_refute_in_epsilon' message='Passing verdict_refute_in_epsilon?' method='verdict_refute_in_epsilon?' outcome='passed' volatile='false'><exp_value>1</exp_value><act_value>1.2</act_value><epsilon>0.1</epsilon></verdict><exception><class>Minitest::Assertion</class><message>Expected |1 - 1.1| (0.10000000000000009) to not be &lt;= 0.2.</message><backtrace/></exception><verdict id='failing_verdict_refute_in_epsilon' message='Failing verdict_refute_in_epsilon?' method='verdict_refute_in_epsilon?' outcome='failed' volatile='false'><exp_value>1</exp_value><act_value>1.1</act_value><epsilon>0.2</epsilon></verdict></section><section name='Use vr_in_epsilon?' number='50'><verdict id='passing_vr_in_epsilon' message='Passing vr_in_epsilon?' method='verdict_refute_in_epsilon?' outcome='passed' volatile='false'><exp_value>1</exp_value><act_value>1.2</act_value><epsilon>0.1</epsilon></verdict><exception><class>Minitest::Assertion</class><message>Expected |1 - 1.1| (0.10000000000000009) to not be &lt;= 0.2.</message><backtrace/></exception><verdict id='failing_vr_in_epsilon' message='Failing vr_in_epsilon?' method='verdict_refute_in_epsilon?' outcome='failed' volatile='false'><exp_value>1</exp_value><act_value>1.1</act_value><epsilon>0.2</epsilon></verdict></section><section name='Use verdict_refute_includes?' number='51'><verdict id='passing_verdict_refute_includes' message='Passing verdict_refute_includes?' method='verdict_refute_includes?' outcome='passed' volatile='false'><exp_value>[:b]</exp_value><act_value>:a</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected [:a] to not include :a.</message><backtrace/></exception><verdict id='failing_verdict_refute_includes' message='Failing verdict_refute_includes?' method='verdict_refute_includes?' outcome='failed' volatile='false'><exp_value>[:a]</exp_value><act_value>:a</act_value></verdict></section><section name='Use vr_includes?' number='52'><verdict id='passing_vr_includes' message='Passing vr_includes?' method='verdict_refute_includes?' outcome='passed' volatile='false'><exp_value>[:b]</exp_value><act_value>:a</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected [:a] to not include :a.</message><backtrace/></exception><verdict id='failing_vr_includes' message='Failing vr_includes?' method='verdict_refute_includes?' outcome='failed' volatile='false'><exp_value>[:a]</exp_value><act_value>:a</act_value></verdict></section><section name='Use verdict_refute_instance_of?' number='53'><verdict id='passing_verdict_refute_instance_of' message='Passing verdict_refute_instance_of?' method='verdict_refute_instance_of?' outcome='passed' volatile='false'><exp_value>String</exp_value><act_value>0</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected # encoding: UTF-8
&quot;Boo!&quot; to not be an instance of String.</message><backtrace/></exception><verdict id='failing_verdict_refute_instance_of' message='Failing verdict_refute_instance_of?' method='verdict_refute_instance_of?' outcome='failed' volatile='false'><exp_value>String</exp_value><act_value>Boo!</act_value></verdict></section><section name='Use vr_instance_of?' number='54'><verdict id='passing_vr_instance_of' message='Passing vr_instance_of?' method='verdict_refute_instance_of?' outcome='passed' volatile='false'><exp_value>String</exp_value><act_value>0</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected # encoding: UTF-8
&quot;Boo!&quot; to not be an instance of String.</message><backtrace/></exception><verdict id='failing_vr_instance_of' message='Failing vr_instance_of?' method='verdict_refute_instance_of?' outcome='failed' volatile='false'><exp_value>String</exp_value><act_value>Boo!</act_value></verdict></section><section name='Use verdict_refute_kind_of?' number='55'><verdict id='passing_verdict_refute_kind_of' message='Passing verdict_refute_kind_of?' method='verdict_refute_kind_of?' outcome='passed' volatile='false'><exp_value>StandardError</exp_value><act_value>0</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected #&lt;RuntimeError: RuntimeError&gt; to not be a kind of StandardError.</message><backtrace/></exception><verdict id='failing_verdict_refute_kind_of' message='Failing verdict_refute_kind_of?' method='verdict_refute_kind_of?' outcome='failed' volatile='false'><exp_value>StandardError</exp_value><act_value>#&lt;RuntimeError: RuntimeError&gt;</act_value></verdict></section><section name='Use vr_kind_of?' number='56'><verdict id='passing_vr_kind_of' message='Passing vr_kind_of?' method='verdict_refute_kind_of?' outcome='passed' volatile='false'><exp_value>StandardError</exp_value><act_value>0</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected #&lt;RuntimeError: RuntimeError&gt; to not be a kind of StandardError.</message><backtrace/></exception><verdict id='failing_vr_kind_of' message='Failing vr_kind_of?' method='verdict_refute_kind_of?' outcome='failed' volatile='false'><exp_value>StandardError</exp_value><act_value>#&lt;RuntimeError: RuntimeError&gt;</act_value></verdict></section><section name='Use verdict_refute_match?' number='57'><verdict id='passing_verdict_refute_match' message='Passing verdict_refute_match?' method='verdict_refute_match?' outcome='passed' volatile='false'><exp_value>/foo/</exp_value><act_value>good</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected /foo/ to not match # encoding: UTF-8
&quot;food&quot;.</message><backtrace/></exception><verdict id='failing_verdict_refute_match' message='Failing verdict_refute_match?' method='verdict_refute_match?' outcome='failed' volatile='false'><exp_value>/foo/</exp_value><act_value>food</act_value></verdict></section><section name='Use vr_match?' number='58'><verdict id='passing_vr_match' message='Passing vr_match?' method='verdict_refute_match?' outcome='passed' volatile='false'><exp_value>/foo/</exp_value><act_value>good</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected /foo/ to not match # encoding: UTF-8
&quot;food&quot;.</message><backtrace/></exception><verdict id='failing_vr_match' message='Failing vr_match?' method='verdict_refute_match?' outcome='failed' volatile='false'><exp_value>/foo/</exp_value><act_value>food</act_value></verdict></section><section name='Use verdict_refute_nil?' number='59'><verdict id='passing_verdict_refute_nil' message='Passing verdict_refute_nil?' method='verdict_refute_nil?' outcome='passed' volatile='false'><act_value>false</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected nil to not be nil.</message><backtrace/></exception><verdict id='failing_verdict_refute_nil' message='Failing verdict_refute_nil?' method='verdict_refute_nil?' outcome='failed' volatile='false'><act_value>nil</act_value></verdict></section><section name='Use alias vr_nil?' number='60'><verdict id='passing_vr_nil' message='Passing vr_nil?' method='verdict_refute_nil?' outcome='passed' volatile='false'><act_value>false</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected nil to not be nil.</message><backtrace/></exception><verdict id='failing_vr_nil' message='Failing vr_nil?' method='verdict_refute_nil?' outcome='failed' volatile='false'><act_value>nil</act_value></verdict></section><section name='Use verdict_refute_operator?' number='61'><verdict id='passing_verdict_refute_operator' message='Passing verdict_refute_operator?' method='verdict_refute_operator?' outcome='passed' volatile='false'><object_1>1</object_1><operator>:&gt;</operator><object_2>2</object_2></verdict><exception><class>Minitest::Assertion</class><message>Expected 2 to not be &gt; 1.</message><backtrace/></exception><verdict id='failing_verdict_refute_operator' message='Failing verdict_refute_operator?' method='verdict_refute_operator?' outcome='failed' volatile='false'><object_1>2</object_1><operator>:&gt;</operator><object_2>1</object_2></verdict></section><section name='Use vr_operator?' number='62'><verdict id='passing_vr_operator' message='Passing vr_operator?' method='verdict_refute_operator?' outcome='passed' volatile='false'><object_1>1</object_1><operator>:&gt;</operator><object_2>2</object_2></verdict><exception><class>Minitest::Assertion</class><message>Expected 2 to not be &gt; 1.</message><backtrace/></exception><verdict id='failing_vr_operator' message='Failing vr_operator?' method='verdict_refute_operator?' outcome='failed' volatile='false'><object_1>2</object_1><operator>:&gt;</operator><object_2>1</object_2></verdict></section><section name='Use verdict_refute_predicate?' number='63'><verdict id='passing_verdict_refute_predicate' message='Passing verdict_refute_predicate?' method='verdict_refute_predicate?' outcome='passed' volatile='false'><object>a</object><operator>:empty?</operator></verdict><exception><class>Minitest::Assertion</class><message>Expected # encoding: UTF-8
&quot;&quot; to not be empty?.</message><backtrace/></exception><verdict id='failing_verdict_refute_predicate' message='Failing verdict_refute_predicate?' method='verdict_refute_predicate?' outcome='failed' volatile='false'><object/><operator>:empty?</operator></verdict></section><section name='Use alias vr_predicate?' number='64'><verdict id='passing_vr_predicate' message='Passing vr_predicate?' method='verdict_refute_predicate?' outcome='passed' volatile='false'><object>a</object><operator>:empty?</operator></verdict><exception><class>Minitest::Assertion</class><message>Expected # encoding: UTF-8
&quot;&quot; to not be empty?.</message><backtrace/></exception><verdict id='failing_vr_predicate' message='Failing vr_predicate?' method='verdict_refute_predicate?' outcome='failed' volatile='false'><object/><operator>:empty?</operator></verdict></section><section name='Use verdict_refute_respond_to?' number='65'><verdict id='passing_verdict_refute_respond_to' message='Passing verdict_refute_respond_to?' method='verdict_refute_respond_to?' outcome='passed' volatile='false'><object>0</object><method>:empty?</method></verdict><exception><class>Minitest::Assertion</class><message>Expected # encoding: UTF-8
&quot;foo&quot; to not respond to empty?.</message><backtrace/></exception><verdict id='failing_verdict_refute_respond_to' message='Failing verdict_refute_respond_to?' method='verdict_refute_respond_to?' outcome='failed' volatile='false'><object>foo</object><method>:empty?</method></verdict></section><section name='Use alias vr_respond_to?' number='66'><verdict id='passing_vr_respond_to' message='Passing vr_respond_to?' method='verdict_refute_respond_to?' outcome='passed' volatile='false'><object>0</object><method>:empty?</method></verdict><exception><class>Minitest::Assertion</class><message>Expected # encoding: UTF-8
&quot;foo&quot; to not respond to empty?.</message><backtrace/></exception><verdict id='failing_vr_respond_to' message='Failing vr_respond_to?' method='verdict_refute_respond_to?' outcome='failed' volatile='false'><object>foo</object><method>:empty?</method></verdict></section><section name='Use verdict_refute_same?' number='67'><verdict id='passing_verdict_refute_same' message='Passing verdict_refute_same?' method='verdict_refute_same?' outcome='passed' volatile='false'><exp_value>#&lt;Object:0x0000000273b930&gt;</exp_value><act_value>#&lt;Object:0x0000000273b908&gt;</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected #&lt;Object:0x0000000273b930&gt; (oid=20569240) to not be the same as #&lt;Object:0x0000000273b930&gt; (oid=20569240).</message><backtrace/></exception><verdict id='failing_verdict_refute_same' message='Failing verdict_refute_same?' method='verdict_refute_same?' outcome='failed' volatile='false'><exp_value>#&lt;Object:0x0000000273b930&gt;</exp_value><act_value>#&lt;Object:0x0000000273b930&gt;</act_value></verdict></section><section name='Use vr_same?' number='68'><verdict id='passing_vr_same' message='Passing vr_same?' method='verdict_refute_same?' outcome='passed' volatile='false'><exp_value>#&lt;Object:0x0000000273b930&gt;</exp_value><act_value>#&lt;Object:0x0000000273b908&gt;</act_value></verdict><exception><class>Minitest::Assertion</class><message>Expected #&lt;Object:0x0000000273b930&gt; (oid=20569240) to not be the same as #&lt;Object:0x0000000273b930&gt; (oid=20569240).</message><backtrace/></exception><verdict id='failing_vr_same' message='Failing vr_same?' method='verdict_refute_same?' outcome='failed' volatile='false'><exp_value>#&lt;Object:0x0000000273b930&gt;</exp_value><act_value>#&lt;Object:0x0000000273b930&gt;</act_value></verdict></section><exception><class>Minitest::Assertion</class><message>Expected: 0
  Actual: 1</message><backtrace/></exception><verdict id='error count' message='error count' method='verdict_assert_equal?' outcome='failed' volatile='false'><exp_value>0</exp_value><act_value>1</act_value></verdict></log>